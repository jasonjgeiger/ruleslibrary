---
description: Rules for chat responses to update documentation files based on milestones
globs: 
alwaysApply: true
---
# Documentation Rules

## Documentation Types

1. **Prompt-Journal**
   - **Purpose**: Chronological record of development milestones
   - **Location**: `docs/prompt-journal.md`
   - **Content**:
     - What was done
     - When it was done
     - Why it was done
     - High-level impact
   - **Format**: Structured entries with prompt, actions, and next steps

2. **Logs**
   - **Purpose**: Detailed technical analysis
   - **Location**: `docs/logs/YYYY-MM-DD-descriptive-name.md`
   - **Content**:
     - How things were done
     - Technical decisions and rationale
     - Implementation patterns
     - Detailed analysis
   - **Format**: Free-form technical documentation
   - **Creation Guidelines**:
     - Use format: `YYYY-MM-DD-descriptive-name.md`
     - Include:
       - Context of the discussion
       - Detailed analysis or explanation
       - Any relevant code snippets
       - References to related files or documentation
     - Reference in prompt-journal when created

3. **Rules**
   - **Purpose**: Guidelines and standards for development
   - **Location**: `docs/rules/*.mdc`
   - **Content**:
     - Development standards
     - Best practices
     - Process guidelines
   - **Format**: Structured markdown with clear sections

## Milestone Identification

Track and document significant events:
- Completed tasks or features
- Major architectural decisions
- Implementation of key functionality
- Important refactoring
- Technology selections
- Critical issue resolutions
- Project structure changes

## Documentation Update Process

1. **When to Update**
   - After completing significant tasks
   - When making architectural decisions
   - Following important refactoring
   - Upon resolving critical issues
   - When changing project structure

2. **Update Guidelines**
   - Maintain existing formatting and structure
   - Place new entries in chronological order
   - Be concise but comprehensive
   - Include dates for all entries
   - Reference related code files or components

3. **File Organization**
   - Keep related documentation together
   - Use consistent naming conventions
   - Maintain clear directory structure
   - Cross-reference related documents

## Documentation Standards

1. **Formatting**
   - Use consistent markdown formatting
   - Include clear section headers
   - Maintain proper indentation
   - Use lists for better readability

2. **Content**
   - Be clear and concise
   - Include relevant context
   - Provide examples when helpful
   - Link to related resources

3. **Maintenance**
   - Regular review and updates
   - Version control for all docs
   - Keep documentation current
   - Remove outdated information

## Integration with Development

1. **Code Documentation**
   - Document code changes
   - Update API documentation
   - Maintain README files
   - Keep changelog current

2. **Process Documentation**
   - Document development workflows
   - Maintain setup instructions
   - Keep deployment guides current
   - Document testing procedures

3. **Knowledge Base**
   - Build searchable documentation
   - Maintain troubleshooting guides
   - Document common solutions
   - Keep FAQs updated

